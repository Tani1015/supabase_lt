schema {
  query: Query
  mutation: Mutation
}
"A high precision floating point value represented as a string"
scalar BigFloat
"An arbitrary size integer represented as a string"
scalar BigInt
"An opaque string using for tracking a position in results during pagination"
scalar Cursor
"A date wihout time information"
scalar Date
"A date and time"
scalar Datetime
"A Javascript Object Notation value serialized as a string"
scalar JSON
"Any type not handled by the type system"
scalar Opaque
"A time without date information"
scalar Time
"A universally unique identifier"
scalar UUID
"The root type for creating and mutating data"
type Mutation {
  "Deletes zero or more records from the `countries` collection"
  deleteFromcountriesCollection(
    "Restricts the mutation's impact to records matching the criteria"
    filter: countriesFilter,
    "The maximum number of records in the collection permitted to be affected"
    atMost: Int! = 1
  ): countriesDeleteResponse!
  "Deletes zero or more records from the `countrydetails` collection"
  deleteFromcountrydetailsCollection(
    "Restricts the mutation's impact to records matching the criteria"
    filter: countrydetailsFilter,
    "The maximum number of records in the collection permitted to be affected"
    atMost: Int! = 1
  ): countrydetailsDeleteResponse!
  "Adds one or more `countries` records to the collection"
  insertIntocountriesCollection(objects: [countriesInsertInput!]!): countriesInsertResponse
  "Adds one or more `countrydetails` records to the collection"
  insertIntocountrydetailsCollection(objects: [countrydetailsInsertInput!]!): countrydetailsInsertResponse
  "Updates zero or more records in the `countries` collection"
  updatecountriesCollection(
    "Fields that are set will be updated for all records matching the `filter`"
    set: countriesUpdateInput!,
    "Restricts the mutation's impact to records matching the criteria"
    filter: countriesFilter,
    "The maximum number of records in the collection permitted to be affected"
    atMost: Int! = 1
  ): countriesUpdateResponse!
  "Updates zero or more records in the `countrydetails` collection"
  updatecountrydetailsCollection(
    "Fields that are set will be updated for all records matching the `filter`"
    set: countrydetailsUpdateInput!,
    "Restricts the mutation's impact to records matching the criteria"
    filter: countrydetailsFilter,
    "The maximum number of records in the collection permitted to be affected"
    atMost: Int! = 1
  ): countrydetailsUpdateResponse!
}
type PageInfo {
  endCursor: String
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
}
"The root type for querying data"
type Query {
  "A pagable collection of type `countries`"
  countriesCollection(
    "Query the first `n` records in the collection"
    first: Int,
    "Query the last `n` records in the collection"
    last: Int,
    "Query values in the collection before the provided cursor"
    before: Cursor,
    "Query values in the collection after the provided cursor"
    after: Cursor,
    "Skip n values from the after cursor. Alternative to cursor pagination. Backward pagination not supported."
    offset: Int,
    "Filters to apply to the results set when querying from the collection"
    filter: countriesFilter,
    "Sort order to apply to the collection"
    orderBy: [countriesOrderBy!]
  ): countriesConnection
  "A pagable collection of type `countrydetails`"
  countrydetailsCollection(
    "Query the first `n` records in the collection"
    first: Int,
    "Query the last `n` records in the collection"
    last: Int,
    "Query values in the collection before the provided cursor"
    before: Cursor,
    "Query values in the collection after the provided cursor"
    after: Cursor,
    "Skip n values from the after cursor. Alternative to cursor pagination. Backward pagination not supported."
    offset: Int,
    "Filters to apply to the results set when querying from the collection"
    filter: countrydetailsFilter,
    "Sort order to apply to the collection"
    orderBy: [countrydetailsOrderBy!]
  ): countrydetailsConnection
  "Retrieve a record by its `ID`"
  node(
    "The record's `ID`"
    nodeId: ID!
  ): Node
}
type countries implements Node {
  "Globally Unique Record Identifier"
  nodeId: ID!
  id: BigInt!
  name: String!
  countrydetailsCollection(
    "Query the first `n` records in the collection"
    first: Int,
    "Query the last `n` records in the collection"
    last: Int,
    "Query values in the collection before the provided cursor"
    before: Cursor,
    "Query values in the collection after the provided cursor"
    after: Cursor,
    "Skip n values from the after cursor. Alternative to cursor pagination. Backward pagination not supported."
    offset: Int,
    "Filters to apply to the results set when querying from the collection"
    filter: countrydetailsFilter,
    "Sort order to apply to the collection"
    orderBy: [countrydetailsOrderBy!]
  ): countrydetailsConnection
}
type countriesConnection {
  edges: [countriesEdge!]!
  pageInfo: PageInfo!
}
type countriesDeleteResponse {
  "Count of the records impacted by the mutation"
  affectedCount: Int!
  "Array of records impacted by the mutation"
  records: [countries!]!
}
type countriesEdge {
  cursor: String!
  node: countries!
}
type countriesInsertResponse {
  "Count of the records impacted by the mutation"
  affectedCount: Int!
  "Array of records impacted by the mutation"
  records: [countries!]!
}
type countriesUpdateResponse {
  "Count of the records impacted by the mutation"
  affectedCount: Int!
  "Array of records impacted by the mutation"
  records: [countries!]!
}
type countrydetails implements Node {
  "Globally Unique Record Identifier"
  nodeId: ID!
  id: BigInt!
  country_id: BigInt
  capital: String!
  population: Int!
  area: Int!
  currency: String!
  gdp: Int!
  countries: countries
}
type countrydetailsConnection {
  edges: [countrydetailsEdge!]!
  pageInfo: PageInfo!
}
type countrydetailsDeleteResponse {
  "Count of the records impacted by the mutation"
  affectedCount: Int!
  "Array of records impacted by the mutation"
  records: [countrydetails!]!
}
type countrydetailsEdge {
  cursor: String!
  node: countrydetails!
}
type countrydetailsInsertResponse {
  "Count of the records impacted by the mutation"
  affectedCount: Int!
  "Array of records impacted by the mutation"
  records: [countrydetails!]!
}
type countrydetailsUpdateResponse {
  "Count of the records impacted by the mutation"
  affectedCount: Int!
  "Array of records impacted by the mutation"
  records: [countrydetails!]!
}
interface Node {
  "Retrieves a record by `ID`"
  nodeId: ID!
}
enum FilterIs {
  NULL
  NOT_NULL
}
"Defines a per-field sorting order"
enum OrderByDirection {
  "Ascending order, nulls first"
  AscNullsFirst
  "Ascending order, nulls last"
  AscNullsLast
  "Descending order, nulls first"
  DescNullsFirst
  "Descending order, nulls last"
  DescNullsLast
}
"""
Boolean expression comparing fields on type "BigFloat"
"""
input BigFloatFilter {
  eq: BigFloat
  gt: BigFloat
  gte: BigFloat
  in: [BigFloat!]
  is: FilterIs
  lt: BigFloat
  lte: BigFloat
  neq: BigFloat
}
"""
Boolean expression comparing fields on type "BigFloatList"
"""
input BigFloatListFilter {
  containedBy: [BigFloat!]
  contains: [BigFloat!]
  eq: [BigFloat!]
  is: FilterIs
  overlaps: [BigFloat!]
}
"""
Boolean expression comparing fields on type "BigInt"
"""
input BigIntFilter {
  eq: BigInt
  gt: BigInt
  gte: BigInt
  in: [BigInt!]
  is: FilterIs
  lt: BigInt
  lte: BigInt
  neq: BigInt
}
"""
Boolean expression comparing fields on type "BigIntList"
"""
input BigIntListFilter {
  containedBy: [BigInt!]
  contains: [BigInt!]
  eq: [BigInt!]
  is: FilterIs
  overlaps: [BigInt!]
}
"""
Boolean expression comparing fields on type "Boolean"
"""
input BooleanFilter {
  eq: Boolean
  is: FilterIs
}
"""
Boolean expression comparing fields on type "BooleanList"
"""
input BooleanListFilter {
  containedBy: [Boolean!]
  contains: [Boolean!]
  eq: [Boolean!]
  is: FilterIs
  overlaps: [Boolean!]
}
"""
Boolean expression comparing fields on type "Date"
"""
input DateFilter {
  eq: Date
  gt: Date
  gte: Date
  in: [Date!]
  is: FilterIs
  lt: Date
  lte: Date
  neq: Date
}
"""
Boolean expression comparing fields on type "DateList"
"""
input DateListFilter {
  containedBy: [Date!]
  contains: [Date!]
  eq: [Date!]
  is: FilterIs
  overlaps: [Date!]
}
"""
Boolean expression comparing fields on type "Datetime"
"""
input DatetimeFilter {
  eq: Datetime
  gt: Datetime
  gte: Datetime
  in: [Datetime!]
  is: FilterIs
  lt: Datetime
  lte: Datetime
  neq: Datetime
}
"""
Boolean expression comparing fields on type "DatetimeList"
"""
input DatetimeListFilter {
  containedBy: [Datetime!]
  contains: [Datetime!]
  eq: [Datetime!]
  is: FilterIs
  overlaps: [Datetime!]
}
"""
Boolean expression comparing fields on type "Float"
"""
input FloatFilter {
  eq: Float
  gt: Float
  gte: Float
  in: [Float!]
  is: FilterIs
  lt: Float
  lte: Float
  neq: Float
}
"""
Boolean expression comparing fields on type "FloatList"
"""
input FloatListFilter {
  containedBy: [Float!]
  contains: [Float!]
  eq: [Float!]
  is: FilterIs
  overlaps: [Float!]
}
"""
Boolean expression comparing fields on type "ID"
"""
input IDFilter {
  eq: ID
}
"""
Boolean expression comparing fields on type "Int"
"""
input IntFilter {
  eq: Int
  gt: Int
  gte: Int
  in: [Int!]
  is: FilterIs
  lt: Int
  lte: Int
  neq: Int
}
"""
Boolean expression comparing fields on type "IntList"
"""
input IntListFilter {
  containedBy: [Int!]
  contains: [Int!]
  eq: [Int!]
  is: FilterIs
  overlaps: [Int!]
}
"""
Boolean expression comparing fields on type "Opaque"
"""
input OpaqueFilter {
  eq: Opaque
  is: FilterIs
}
"""
Boolean expression comparing fields on type "String"
"""
input StringFilter {
  eq: String
  gt: String
  gte: String
  ilike: String
  in: [String!]
  iregex: String
  is: FilterIs
  like: String
  lt: String
  lte: String
  neq: String
  regex: String
  startsWith: String
}
"""
Boolean expression comparing fields on type "StringList"
"""
input StringListFilter {
  containedBy: [String!]
  contains: [String!]
  eq: [String!]
  is: FilterIs
  overlaps: [String!]
}
"""
Boolean expression comparing fields on type "Time"
"""
input TimeFilter {
  eq: Time
  gt: Time
  gte: Time
  in: [Time!]
  is: FilterIs
  lt: Time
  lte: Time
  neq: Time
}
"""
Boolean expression comparing fields on type "TimeList"
"""
input TimeListFilter {
  containedBy: [Time!]
  contains: [Time!]
  eq: [Time!]
  is: FilterIs
  overlaps: [Time!]
}
"""
Boolean expression comparing fields on type "UUID"
"""
input UUIDFilter {
  eq: UUID
  in: [UUID!]
  is: FilterIs
  neq: UUID
}
"""
Boolean expression comparing fields on type "UUIDList"
"""
input UUIDListFilter {
  containedBy: [UUID!]
  contains: [UUID!]
  eq: [UUID!]
  is: FilterIs
  overlaps: [UUID!]
}
input countriesFilter {
  id: BigIntFilter
  name: StringFilter
  nodeId: IDFilter
  "Returns true only if all its inner filters are true, otherwise returns false"
  and: [countriesFilter!]
  "Returns true if at least one of its inner filters is true, otherwise returns false"
  or: [countriesFilter!]
  "Negates a filter"
  not: countriesFilter
}
input countriesInsertInput {
  name: String
}
input countriesOrderBy {
  id: OrderByDirection
  name: OrderByDirection
}
input countriesUpdateInput {
  name: String
}
input countrydetailsFilter {
  id: BigIntFilter
  country_id: BigIntFilter
  capital: StringFilter
  population: IntFilter
  area: IntFilter
  currency: StringFilter
  gdp: IntFilter
  nodeId: IDFilter
  "Returns true only if all its inner filters are true, otherwise returns false"
  and: [countrydetailsFilter!]
  "Returns true if at least one of its inner filters is true, otherwise returns false"
  or: [countrydetailsFilter!]
  "Negates a filter"
  not: countrydetailsFilter
}
input countrydetailsInsertInput {
  country_id: BigInt
  capital: String
  population: Int
  area: Int
  currency: String
  gdp: Int
}
input countrydetailsOrderBy {
  id: OrderByDirection
  country_id: OrderByDirection
  capital: OrderByDirection
  population: OrderByDirection
  area: OrderByDirection
  currency: OrderByDirection
  gdp: OrderByDirection
}
input countrydetailsUpdateInput {
  country_id: BigInt
  capital: String
  population: Int
  area: Int
  currency: String
  gdp: Int
}

